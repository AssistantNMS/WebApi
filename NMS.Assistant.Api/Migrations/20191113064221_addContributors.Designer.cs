// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NMS.Assistant.Persistence;

namespace NMS.Assistant.Api.Migrations
{
    [DbContext(typeof(NmsAssistantContext))]
    [Migration("20191113064221_addContributors")]
    partial class addContributors
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NMS.Assistant.Persistence.Entity.Contributor", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Contribution")
                        .IsRequired();

                    b.Property<string>("ImageUrl")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("SortRank");

                    b.HasKey("Guid");

                    b.ToTable("Contributors");
                });

            modelBuilder.Entity("NMS.Assistant.Persistence.Entity.Donation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Amount")
                        .IsRequired();

                    b.Property<DateTime>("DonationDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.HasKey("Guid");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("NMS.Assistant.Persistence.Entity.Feedback", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Guid");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("NMS.Assistant.Persistence.Entity.FeedbackAnswer", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AnonymousUserGuid");

                    b.Property<string>("Answer")
                        .IsRequired();

                    b.Property<int>("AppType");

                    b.Property<DateTime>("DateAnswered");

                    b.Property<Guid>("FeedbackGuid");

                    b.Property<Guid>("FeedbackQuestionGuid");

                    b.HasKey("Guid");

                    b.HasIndex("FeedbackGuid");

                    b.HasIndex("FeedbackQuestionGuid");

                    b.ToTable("FeedbackAnswers");
                });

            modelBuilder.Entity("NMS.Assistant.Persistence.Entity.FeedbackQuestion", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FeedbackGuid");

                    b.Property<string>("Question")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.HasKey("Guid");

                    b.HasIndex("FeedbackGuid");

                    b.ToTable("FeedbackQuestions");
                });

            modelBuilder.Entity("NMS.Assistant.Persistence.Entity.Permission", b =>
                {
                    b.Property<int>("Type");

                    b.HasKey("Type");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Type = 0
                        },
                        new
                        {
                            Type = 1
                        },
                        new
                        {
                            Type = 2
                        },
                        new
                        {
                            Type = 3
                        },
                        new
                        {
                            Type = 4
                        },
                        new
                        {
                            Type = 5
                        },
                        new
                        {
                            Type = 6
                        });
                });

            modelBuilder.Entity("NMS.Assistant.Persistence.Entity.User", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("HashedPassword")
                        .IsRequired();

                    b.Property<DateTime>("JoinDate");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Guid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NMS.Assistant.Persistence.Entity.UserPermission", b =>
                {
                    b.Property<Guid>("UserGuid");

                    b.Property<int>("PermissionType");

                    b.HasKey("UserGuid", "PermissionType");

                    b.HasIndex("PermissionType");

                    b.ToTable("UserPermission");
                });

            modelBuilder.Entity("NMS.Assistant.Persistence.Entity.FeedbackAnswer", b =>
                {
                    b.HasOne("NMS.Assistant.Persistence.Entity.Feedback", "Feedback")
                        .WithMany("Answers")
                        .HasForeignKey("FeedbackGuid")
                        .HasConstraintName("ForeignKey_FeedbackAnswers_Feedbacks")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NMS.Assistant.Persistence.Entity.FeedbackQuestion", "FeedbackQuestion")
                        .WithMany("Answers")
                        .HasForeignKey("FeedbackQuestionGuid")
                        .HasConstraintName("ForeignKey_FeedbackAnswers_FeedbackQuestions")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NMS.Assistant.Persistence.Entity.FeedbackQuestion", b =>
                {
                    b.HasOne("NMS.Assistant.Persistence.Entity.Feedback", "Feedback")
                        .WithMany("Questions")
                        .HasForeignKey("FeedbackGuid")
                        .HasConstraintName("ForeignKey_FeedbackQuestions_Feedbacks")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NMS.Assistant.Persistence.Entity.UserPermission", b =>
                {
                    b.HasOne("NMS.Assistant.Persistence.Entity.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionType")
                        .HasConstraintName("ForeignKey_UserPermissions_Permissions")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NMS.Assistant.Persistence.Entity.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserGuid")
                        .HasConstraintName("ForeignKey_UserPermissions_Users")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
